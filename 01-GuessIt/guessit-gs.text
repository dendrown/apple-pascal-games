(*
 * GUESS IT
 * A computer guessing game
 *)
PROGRAM GuessIt(INPUT, OUTPUT);
USES AppleStuff, TurtleGraphics;

CONST
  MAXTRIES  = 6;            (* User allowed 6 tries to guess number *)
  MAXNUM    = 100;          (* Maximum number *)
  MINNUM    = 1;            (* Minimum number *)
  DIGIT_X   = 120;
  DIGIT_Y   = 80;
  CHROMATIC = 20;           (* Pascal Note() value that begins Middle C *)

  TEXT_LINE_PX  = 8;        (* Text line height in pixels *)
  SEGMENT_PX    = 10;       (* Pixel length of a segment for a digit *)
  SEPARATOR_PX  = 5;        (* Pixel spacing between two digits *)

TYPE
  StatusLine    = 0..1;
  Digit         = 0..9;
  Result        = (WIN, LOSE);
  Scale         = (C4, C4s, D4, E4f, E4, F4, F4s, G4, G4s, A4, B4f, B4,
                   C5, C5s, D5);(*_, E5, F5, F5s, G5, G5s, A5, B5f, B5*)
  DigitRank     = (ONES, TENS);
  DigitSegment  = (TOP,TR, BR, BTM, BL, TL, MID);
  DigitBlock    = Packed Array [0..9] of Set of DigitSegment;

VAR
  Ch : Char;                    (* Used to answer questions *)
  Guess : Integer;              (* Human's guess *)
  Number: MINNUM..MAXNUM;       (* The number itself *)
  NumTry: 0..MAXTRIES;          (* Number of times human has guessed *)
  Digits: DigitBlock;           (* Seven-segment display for numbers *)

(*
 * InitDigits
 * Initialize the 7-segment digit block
 *)
PROCEDURE InitDigits;
BEGIN
  Digits[0] := [TOP, TR, BR, BTM, BL, TL     ];
  Digits[1] := [     TR, BR                  ];
  Digits[2] := [TOP, TR,     BTM, BL,     MID];
  Digits[3] := [TOP, TR, BR, BTM,         MID];
  Digits[4] := [     TR, BR,          TL, MID];
  Digits[5] := [TOP,     BR, BTM,     TL, MID];
  Digits[6] := [TOP, TR, BR, BTM, BL,     MID];
  Digits[7] := [TOP, TR, BR                  ];
  Digits[8] := [TOP, TR, BR, BTM, BL, TL, MID];
  Digits[9] := [TOP, TR, BR,          TL, MID]
END; (* InitDigits *)


(*
 * Init
 * Initialize what we need to for the game
 *)
PROCEDURE Init;
BEGIN
  InitDigits;
  InitTurtle;
  FillScreen(BLACK);
  Randomize
END; (* Init *)


(*
 * PrepDrawXY
 * Outputs a string in graphics mode
 *)
PROCEDURE PrepDrawXY(X, Y : Integer);
BEGIN
  PenColor(NONE);
  MoveTo(X, Y);
  PenColor(WHITE)
END; (* PrepDrawXY *)


(*
 * DrawDigit
 * Outputs a string in graphics mode
 *)
PROCEDURE DrawDigit(N : Digit; Rank : DigitRank);
VAR
  X : Integer;

  (* DrawSegment: traces one of the 7-segment display parts *)
  PROCEDURE DrawSegment(Seg : DigitSegment; Angle : Integer);
  BEGIN
    TurnTo(Angle);
    If Seg IN Digits[N] Then
      PenColor(WHITE)
    Else
      PenColor(BLACK);
    Move(SEGMENT_PX)
  END;

BEGIN
  X := DIGIT_X;
  If Rank = ONES Then
    X := X + SEGMENT_PX + SEPARATOR_PX;

  (* The requested (X,Y) point is the lower left of the digit.   *)
  (* This follows WChar/WString, rather than 7-segment displays. *)
  PrepDraw(X, DIGIT_Y);
  DrawSegment(BL,   90);
  DrawSegment(TL ,  90);
  DrawSegment(TOP,   0);
  DrawSegment(TR , -90);
  DrawSegment(BR , -90);
  DrawSegment(BTM, 180);
  PrepDraw(X, DIGIT_Y+SEGMENT_PX);
  DrawSegment(MID,   0)
END; (* DrawDigit *)


(*
 * DrawNumber
 * Outputs a two-digit number via a 7-segment display
 *)
PROCEDURE DrawNumber(N : Integer);
BEGIN
  DrawDigit(N DIV 10, TENS);
  DrawDigit(N MOD 10, ONES)
END; (* DrawNumber *)


(*
 * WriteXY
 * Outputs a string in graphics mode
 *)
PROCEDURE WriteXY(X, Y : Integer; TxtMsg : String);
BEGIN
  PrepDrawXY(X, Y);
  WString(TxtMsg)
END; (* WriteXY *)


(*
 * WriteLnXY
 * Outputs a string in graphics mode and updates Y
 * so that it will be ready for the next line
 *)
PROCEDURE WriteLnXY(X : Integer; VAR Y : Integer; TxtMsg : String);
BEGIN
  WriteXY(X, Y, TxtMsg);
  Y := Y - TEXT_LINE_PX
END; (* WriteLnXY *)


(*
 * Prompt
 * Outputs a string in the status area (bottom of screen)
 *)
PROCEDURE Status(LineNum : StatusLine; TxtMsg : String);
VAR
  Y : Integer;

BEGIN
  Y := LineNum * TEXT_LINE_PX;
  WriteXY(0, Y, '                                        ');
  WriteXY(0, Y, TxtMsg)
END; (* Status *)


(*
 * INSTRUCTIONS
 * Prints out the instructions
 *)
PROCEDURE Instructions;
CONST
  X = 0;

VAR
  Y : Integer;

BEGIN
  Y := 180;
  WriteLnXY(X, Y, 'This is GUESS IT.');

  Y := Y - TEXT_LINE_PX;
  WriteLnXY(X, Y, 'I will choose a number between 1 and 100.');
  WriteLnXY(X, Y, 'You will try to guess that number.');
  WriteLnXY(X, Y, 'If you guess wrong, I will tell you');
  WriteLnXY(X, Y, 'if you guessed too high or too low.');
  WriteLnXY(X, Y, 'You have SIX tries to get the number.');

  Y := Y - TEXT_LINE_PX;
  WriteXY(X, Y, 'Enjoy!')
END; (* Instructions *)


(*
 * CHECKNUM
 * Compare the guess against the correct number & give feedback
 *)
FUNCTION CheckNum : Boolean;
BEGIN
  If Guess = Number Then
      CheckNum := TRUE
  Else
    Begin
      CheckNum := FALSE;
      If Guess > Number Then
        Status(1, 'Too high!')
      Else
        Status(1, 'Too low!')
    End
END; (* CheckNum *)


(*
 * GETNUM
 * Gets a guess from the human, with error checking
 *)
PROCEDURE GetNum;
VAR
  Ch : Char;

BEGIN
  Guess := 0;
  Status(0, 'Your guess?');

  (* Read in digits until we get a carriage return *)
  Repeat
    Read(KEYBOARD, Ch);
    If Ch IN ['0'..'9'] Then
      Begin
        (* Move ones digit to tens & use input as new ones digit *)
        Guess := 10 * (Guess MOD 10) + Ord(Ch) - Ord('0');
        DrawNumber(Guess)
      End
  Until EOLN(KEYBOARD);

  (* Make sure the entry isn't invalid *)
  If (Guess < MINNUM) OR (Guess > MAXNUM) Then
    Begin
      Status(1, 'Illegal number');
      GetNum                            (* Recurse for legal input *)
    End
END; (* GetNum *)


(*
 * WINLOSE
 * Plays a sound for the occasion and displays a message.
 *)
PROCEDURE WinLose(News : Result; Msg : String);

  (* Play: play the note n with a short duration *)
  PROCEDURE Play(n : Scale);
  BEGIN
    Note(CHROMATIC + ORD(n), 10);
  END;

BEGIN
  Status(1, Msg);
  (* Play a happy/sad jingle *)
  Case News of
    WIN:  Begin
            Play(G4);
            Play(B4);
            Play(D5)
          End;
    LOSE: Begin
            Play(E4);
            Play(C4);
          End
  End
END; (* WinLose *)

(*
 * MAIN
 *)
BEGIN
  Init;
  Instructions;

  Ch := 'Y';
  While (Ch <> 'N') AND (Ch <> 'n') Do
    Begin
      Guess  := 0;
      NumTry := 0;

      (* Choose the lucky number & have them guess *)
      Number := (Random MOD MAXNUM) + MINNUM;
      DrawNumber(00);
      Status(1, '');
      Repeat
        GetNum;
        NumTry := NumTry + 1
      Until CheckNum OR (NumTry >= MAXTRIES);
      WriteLn;

      (* Did they get it right? *)
      DrawNumber(Number);
      If Guess = Number Then
        WinLose(WIN, 'CORRECT!!!!')
      Else
        WinLose(LOSE, 'The number was...');

      Status(0, 'Want to try again?');
      Read(KEYBOARD, Ch)
    End;
    TextMode;
END.
